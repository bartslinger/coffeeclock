/*****************************************************************************
* Model: coffeeclock.qm
* File:  ./ao_masterswitch.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::ao_masterswitch.cpp} ................................................*/
#include "qpn.h"
#include "application.h"


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.8.0 or higher required
#endif

/*${AOs::MasterSwitch} .....................................................*/
/*${AOs::MasterSwitch::SM} .................................................*/
QState MasterSwitch_initial(MasterSwitch * const me) {
    /* ${AOs::MasterSwitch::SM::initial} */
    return Q_TRAN(&MasterSwitch_wait briefly);
}
/*${AOs::MasterSwitch::SM::on} .............................................*/
QState MasterSwitch_on(MasterSwitch * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::MasterSwitch::SM::on::MS_CHANGE} */
        case MS_CHANGE_SIG: {
            status_ = Q_TRAN(&MasterSwitch_wait briefly);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::MasterSwitch::SM::off} ............................................*/
QState MasterSwitch_off(MasterSwitch * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::MasterSwitch::SM::off::MS_CHANGE} */
        case MS_CHANGE_SIG: {
            status_ = Q_TRAN(&MasterSwitch_wait briefly);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::MasterSwitch::SM::wait briefly} ...................................*/
QState MasterSwitch_wait briefly(MasterSwitch * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::MasterSwitch::SM::wait briefly} */
        case Q_ENTRY_SIG: {
            QActive_armX(&me->super, 0U, MS_BRIEF_WAIT_TIME, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::MasterSwitch::SM::wait briefly::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            /* ${AOs::MasterSwitch::SM::wait briefly::Q_TIMEOUT::[BSP_isMasterSwitchOn()]} */
            if (BSP_isMasterSwitchOn()) {
                status_ = Q_TRAN(&MasterSwitch_on);
            }
            /* ${AOs::MasterSwitch::SM::wait briefly::Q_TIMEOUT::[else]} */
            else {
                status_ = Q_TRAN(&MasterSwitch_off);
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

