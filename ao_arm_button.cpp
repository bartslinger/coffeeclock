/*****************************************************************************
* Model: coffeeclock.qm
* File:  ./ao_arm_button.cpp
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${.::ao_arm_button.cpp} ..................................................*/
#include "qpn.h"
#include "application.h"


#if ((QP_VERSION < 580) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 5.8.0 or higher required
#endif

/*${AOs::ArmButton} ........................................................*/
/*${AOs::ArmButton::SM} ....................................................*/
QState ArmButton_initial(ArmButton * const me) {
    /* ${AOs::ArmButton::SM::initial} */
    return Q_TRAN(&ArmButton_unpressed);
}
/*${AOs::ArmButton::SM::unpressed} .........................................*/
QState ArmButton_unpressed(ArmButton * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::ArmButton::SM::unpressed::ARM_BUTTON_PRESS} */
        case ARM_BUTTON_PRESS_SIG: {
            status_ = Q_TRAN(&ArmButton_pressed);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::ArmButton::SM::pressed} ...........................................*/
QState ArmButton_pressed(ArmButton * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::ArmButton::SM::pressed} */
        case Q_ENTRY_SIG: {
            QActive_armX(&me->super, 0U, ARM_BUTTON_TIMEOUT, 0U);
            //digitalWrite(LED_ACTIVATED, HIGH);
            QACTIVE_POST_X((QActive *)&AO_Computer, 1U, ARM_BUTTON_PRESS_SIG, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::ArmButton::SM::pressed} */
        case Q_EXIT_SIG: {
            QActive_disarmX(&me->super, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::ArmButton::SM::pressed::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            /* ${AOs::ArmButton::SM::pressed::Q_TIMEOUT::[stillpressed]} */
            if (((PIND & _BV(DDD5)) == 0)) {
                status_ = Q_TRAN(&ArmButton_waiting_for_release);
            }
            /* ${AOs::ArmButton::SM::pressed::Q_TIMEOUT::[else]} */
            else {
                status_ = Q_TRAN(&ArmButton_unpressed);
            }
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::ArmButton::SM::waiting_for_release} ...............................*/
QState ArmButton_waiting_for_release(ArmButton * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::ArmButton::SM::waiting_for_rele~::ARM_BUTTON_RELEASE} */
        case ARM_BUTTON_RELEASE_SIG: {
            status_ = Q_TRAN(&ArmButton_after_release);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::ArmButton::SM::after_release} .....................................*/
QState ArmButton_after_release(ArmButton * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /* ${AOs::ArmButton::SM::after_release} */
        case Q_ENTRY_SIG: {
            QActive_armX(&me->super, 0U, ARM_BUTTON_TIMEOUT, 0U);

            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::ArmButton::SM::after_release} */
        case Q_EXIT_SIG: {
            QActive_disarmX(&me->super, 0U);
            status_ = Q_HANDLED();
            break;
        }
        /* ${AOs::ArmButton::SM::after_release::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            status_ = Q_TRAN(&ArmButton_unpressed);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}

